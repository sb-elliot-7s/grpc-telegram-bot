version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka_broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  redis:
    image: redis
    container_name: redis_container
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - cache:/data

  second_redis:
    image: redis
    container_name: redis_container2
    ports:
      - "6380:6380"
    restart: always
    volumes:
      - second_cache:/data
      - ./financial_statement/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  mongo:
    image: mongo
    container_name: mongo_container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  finance:
    build:
      context: ./finance
    container_name: finance_container
    restart: always
    ports:
      - "50051:50051"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DEBUG: False
    depends_on:
      - redis

  financial_statement:
    build:
      context: ./financial_statement
    container_name: financial_statements_container
    restart: always
    ports:
      - "50052:50052"
    environment:
      REDIS_HOST: second_redis
      REDIS_PORT: 6380
      KAFKA_BROKER: kafka_broker:9092
    depends_on:
      - second_redis
      - kafka_broker
    volumes:
      - my_data:/app/reports

  bot:
    build:
      context: ./bot
    container_name: bot_container
    restart: always
    depends_on:
      - kafka_broker
      - finance
    environment:
      KAFKA_BROKER: kafka_broker:9092
      GRPC_HOST: finance
      GRPC_REPORT_HOST: financial_statement
      API_HOST: api

  users:
    build:
      context: ./users
    container_name: user_container
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      - kafka_broker
      - mongo
    environment:
      HOST: 0.0.0.0
      PORT: 8001
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      KAFKA_BROKER: kafka_broker:9092

  api:
    build:
      context: ./api
    container_name: api_container
    restart: always
    ports:
      - "8000:8000"
    environment:
      PORT: 8000
      HOST: 0.0.0.0
      USER_SERVICE_HOST: users
    depends_on:
      - mongo

  email_service:
    build:
      context: ./email_service
    container_name: email_container
    restart: always
    environment:
      KAFKA_BROKER: kafka_broker:9092
    depends_on:
      - kafka_broker
      - financial_statement

volumes:
  mongo_data:
  cache:
    driver: local
  second_cache:
    driver: local
  my_data:
